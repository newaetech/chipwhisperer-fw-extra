VPATH += :$(HALPATH)/stm32f2
SRC += stm32f2_hal.c stm32f2_hal_lowlevel.c stm32f2_sysmem.c stm32f2xx_hal_rng.c
EXTRAINCDIRS += $(HALPATH)/stm32f2 $(HALPATH)/stm32f2/CMSIS $(HALPATH)/stm32f2/CMSIS/core $(HALPATH)/stm32f2/CMSIS/device $(HALPATH)/stm32f2/Legacy

ASRC += stm32f2_startup.S

MCU_FLAGS = -mcpu=cortex-m3

CC = arm-none-eabi-gcc
OBJCOPY = arm-none-eabi-objcopy
OBJDUMP = arm-none-eabi-objdump
SIZE = arm-none-eabi-size
AR = arm-none-eabi-ar rcs
NM = arm-none-eabi-nm

#Output Format = Binary for this target
FORMAT = binary

CFLAGS += -mthumb -mfloat-abi=soft -fmessage-length=0 -ffunction-sections
CPPFLAGS += -mthumb -mfloat-abi=soft -fmessage-length=0 -ffunction-sections
ASFLAGS += -mthumb -mfloat-abi=soft -fmessage-length=0 -ffunction-sections


CDEFS += -DSTM32F215RGTx -DSTM32F2 -DSTM32 -DDEBUG -DSTM32F215xx
CPPDEFS += -DSTM32F215RGTx -DSTM32F2 -DSTM32 -DDEBUG

ifeq ($(MCU_CLK), INT)
  CFLAGS += -DUSE_INTERNAL_CLK
endif


LDFLAGS +=  --specs=nosys.specs -T $(HALPATH)/stm32f2/LinkerScript.ld -Wl,--gc-sections -lm

ifneq ($(UART_INITBAUD),)
  CDEFS += -DUART_INITBAUD=$(UART_INITBAUD)
  CPPDEFS += -DUART_INITBAUD=$(UART_INITBAUD)
endif

PLL_SCRIPT := "infreq=($(F_CPU))/1e6; print('{} {} {} {}'.format(int(infreq*1e6), *min(((m, n, q) for m in range(2, 64) if 0.95 <= (f1 := infreq / m) <= 2.10 for n in range(192, 433) if 192 <= (f2 := f1 * n) <= 432 for q in range(2, 16) if 0 <= (f := f2 / q) <= 48), key=lambda x: abs(infreq / x[0] * x[1] / x[2] - 48))))"
PLL_VALUES := $(shell python3 -c $(PLL_SCRIPT) 2>/dev/null || echo "FAIL")
ifeq ($(findstring FAIL,$(PLL_VALUES)),)
  CDEFS += -DHSE_VALUE=$(word 1, $(PLL_VALUES))U -DHSE_PLLM_VALUE=$(word 2, $(PLL_VALUES))U -DHSE_PLLN_VALUE=$(word 3, $(PLL_VALUES))U -DHSE_PLLQ_VALUE=$(word 4, $(PLL_VALUES))U
endif
